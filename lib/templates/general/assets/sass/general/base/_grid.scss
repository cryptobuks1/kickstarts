////////////////////////////////////////////////////////////////////////////////
//
// GRID FUNCTION
//
////////////////////////////////////////////////////////////////////////////////

// Set initial value to container
$max-columns: $columns;

// Utility function â€” you should never need to modify this
@function total-width($columns:$columns) {
    @return ($column-width * $columns) + ($gutter-width * $columns);
}


////////////////////////////////////////////////////////////////////////////////
//
// BASIC MIXINS
//
////////////////////////////////////////////////////////////////////////////////

@mixin container() {
    margin: 0 auto;
    width: $total-width;
    @if $use-max-width == true {
        max-width: $max-width;
    }
}

@mixin row() {
    display: block;
    margin: 0 auto;
    @include clearfix();
}

@mixin column($x,$columns:$columns) {
    display: inline;
    float: left;
    width: $total-width*(((($gutter-width+$column-width)*$x)-$gutter-width) / total-width($columns));
    margin: 0 $total-width*(($gutter-width*.5)/total-width($columns));
    @if $legacy-support == true {
        *width: $total-width*(((($gutter-width+$column-width)*$x)-$gutter-width) / total-width($columns))-$correction;
        *margin: 0 $total-width*(($gutter-width*.5)/total-width($columns))-$correction;
    }
}


////////////////////////////////////////////////////////////////////////////////
//
// MARGIN MIXINS
//
////////////////////////////////////////////////////////////////////////////////

@mixin push($offset: 1) {
    margin-left: $total-width*((($gutter-width+$column-width)*$offset) / total-width($columns)) + $total-width*(($gutter-width*.5)/total-width($columns));
}

@mixin pull($offset: 1) {
    margin-right: $total-width*((($gutter-width+$column-width)*$offset) / total-width($columns)) + $total-width*(($gutter-width*.5)/total-width($columns));
}

@mixin squish($offset: 1) {
    margin-left: $total-width*((($gutter-width+$column-width)*$offset) / total-width($columns)) + $total-width*(($gutter-width*.5)/total-width($columns));
    margin-right: $total-width*((($gutter-width+$column-width)*$offset) / total-width($columns)) + $total-width*(($gutter-width*.5)/total-width($columns));
}

@mixin alpha() {
    margin-left: 0;
}

@mixin omega() {
    margin-right: 0;
}


////////////////////////////////////////////////////////////////////////////////
//
// GRID SUPPORT
//
////////////////////////////////////////////////////////////////////////////////


// Import
@import "compass/layout/grid-background";
@import "compass/css3/background-origin";
@import "compass/css3/background-clip";

// Functions
@function column($context: $columns, $style: $use-grid-type) {
    @return if($style == static, $column-width, relative-width($column-width, $context));
}

@function gutter($context: $columns, $style: $use-grid-type) {
    @return if($style == static, $gutter-width, relative-width($gutter-width, $context));
}

@function relative-width($width, $context : $columns) {
    @return percentage($width / columns-width($context));
}

@function columns-width($columns: $columns) {
    @if round($columns) != $columns {
        @warn "Ambitious Grid System works better with integer columns. For partial-columns, you may need to finesse the math by hand using functions directly.";
    }
    @return ($columns * $column-width) + (if($columns >= 1, ceil($columns - 1), 0) * $gutter-width);
}

// Mixin
@mixin grid-background(){
    @include column-grid-background($columns, column(), gutter(), 0);
    @include background-origin(content-box);
    @include background-clip(content-box);
}

